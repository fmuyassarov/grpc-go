// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/api.proto

package grpc_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	API(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIResponse, error)
	APIS(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (APIService_APISClient, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) API(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/api.APIService/API", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) APIS(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (APIService_APISClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[0], "/api.APIService/APIS", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceAPISClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_APISClient interface {
	Recv() (*APIResponse, error)
	grpc.ClientStream
}

type aPIServiceAPISClient struct {
	grpc.ClientStream
}

func (x *aPIServiceAPISClient) Recv() (*APIResponse, error) {
	m := new(APIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	API(context.Context, *APIRequest) (*APIResponse, error)
	APIS(*APIRequest, APIService_APISServer) error
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) API(context.Context, *APIRequest) (*APIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API not implemented")
}
func (UnimplementedAPIServiceServer) APIS(*APIRequest, APIService_APISServer) error {
	return status.Errorf(codes.Unimplemented, "method APIS not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_API_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).API(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/API",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).API(ctx, req.(*APIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_APIS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(APIRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).APIS(m, &aPIServiceAPISServer{stream})
}

type APIService_APISServer interface {
	Send(*APIResponse) error
	grpc.ServerStream
}

type aPIServiceAPISServer struct {
	grpc.ServerStream
}

func (x *aPIServiceAPISServer) Send(m *APIResponse) error {
	return x.ServerStream.SendMsg(m)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "API",
			Handler:    _APIService_API_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "APIS",
			Handler:       _APIService_APIS_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/api.proto",
}
